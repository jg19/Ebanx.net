// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Ebanx.net.Models.PaymentApi;
//
//    var directResponse = DirectResponse.FromJson(jsonString);

namespace Ebanx.net.Models.PaymentApi
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class DirectResponse
    {
        [JsonProperty("payment")]
        public Payment Payment { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }
    }

    public partial class Payment
    {
        [JsonProperty("hash")]
        public string Hash { get; set; }

        [JsonProperty("pin")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Pin { get; set; }

        [JsonProperty("country")]
        public string Country { get; set; }

        [JsonProperty("merchant_payment_code")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MerchantPaymentCode { get; set; }

        [JsonProperty("order_number")]
        public object OrderNumber { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("status_date")]
        public object StatusDate { get; set; }

        [JsonProperty("open_date")]
        public DateTimeOffset OpenDate { get; set; }

        [JsonProperty("confirm_date")]
        public object ConfirmDate { get; set; }

        [JsonProperty("transfer_date")]
        public object TransferDate { get; set; }

        [JsonProperty("amount_br")]
        public string AmountBr { get; set; }

        [JsonProperty("amount_ext")]
        public string AmountExt { get; set; }

        [JsonProperty("amount_iof")]
        public string AmountIof { get; set; }

        [JsonProperty("currency_rate")]
        public string CurrencyRate { get; set; }

        [JsonProperty("currency_ext")]
        public string CurrencyExt { get; set; }

        [JsonProperty("due_date")]
        public DateTimeOffset DueDate { get; set; }

        [JsonProperty("instalments")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Instalments { get; set; }

        [JsonProperty("payment_type_code")]
        public string PaymentTypeCode { get; set; }

        [JsonProperty("boleto_url")]
        public Uri BoletoUrl { get; set; }

        [JsonProperty("boleto_barcode")]
        public string BoletoBarcode { get; set; }

        [JsonProperty("boleto_barcode_raw")]
        public string BoletoBarcodeRaw { get; set; }

        [JsonProperty("pre_approved")]
        public bool PreApproved { get; set; }

        [JsonProperty("capture_available")]
        public object CaptureAvailable { get; set; }
    }

    public partial class DirectResponse
    {
        public static DirectResponse FromJson(string json) => JsonConvert.DeserializeObject<DirectResponse>(json, Ebanx.net.Models.PaymentApi.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this DirectResponse self) => JsonConvert.SerializeObject(self, Ebanx.net.Models.PaymentApi.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
